scalar Cursor
scalar DateTime
scalar JSON
scalar BigInt

interface Node {
    nodeId: ID!
}

interface Entity {
    id: String!
}

interface Creatable {
    created_at: String!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
    endCursor: String!
}
type Game implements Entity, Creatable, Node {
    id: String!
    nodeId: ID!
    created_at: String!
    name: String!
    expires: String!
    turn_duration: String!
    min_players: Int
    max_players: Int
    min_things: Int
    max_things: Int
    gameThingCollection: GameThingConnection,
    gamePlayerCollection: GamePlayerConnection
}

type GameThing {
    game_id: String!
    thing_id: String!
    thing: Thing!
}

type GamePlayer {
    game_id: String!
    player_id: String!
    score: Int
    player: Player!
}

type GameThingConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [GameThingEdge]
}

type GameThingEdge {
    cursor: String!
    node:GameThing!
}
type GamePlayerConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [GamePlayerEdge]
}

type GamePlayerEdge {
    cursor: String!
    node: GamePlayer!
}

type GameEdge {
    cursor: String!
    node: Game!
}

type GameConnection {
    pageInfo: PageInfo!
    edges: [GameEdge]
}
type Player implements Entity, Creatable, Node {
    id: String!
    nodeId: ID!
    created_at: String!
    email: String!
    phone: String
    first_name: String
    last_name: String
    total_score: Int
}

type PlayerRef implements Entity, Node {
    id: String!
    nodeId: ID!
    name: String!
}

type PlayerFriend {
    player: Player!
    friend: Player!
}

type PlayerFriendConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [PlayerFriendEdge]
}

type PlayerFriendEdge {
    cursor: String!
    node: PlayerFriend!
}

type PlayerThingConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [PlayerThingEdge]
}

type PlayerThingEdge {
    cursor: String!
    node: Thing!
}
type Guess {
    created_at: String
    created_by: PlayerRef
    correct: Boolean
}

type ImageRef implements Entity {
    id: String!
    bucketId: String!
}

type Location {
    latitude: Float
    longitude: Float
    name: String
    city: String
    region: String
    country: String
    accuracy: Float
}

type Clues {
    color: String
    where: Location
    what: String
    who: String
    why: String
    rhyme: String
}

type Thing implements Entity, Creatable, Node {
    id: String!
    nodeId: ID!
    created_at: String!
    created_by: PlayerRef!
    name: String!
    guessed: Boolean
    guesses: ThingGuessConnection
    imageUrl: String!
    clues: JSON
}

type ThingGuessConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [ThingGuessEdge]
}

type ThingGuessEdge {
    cursor: String!
    node: Guess
}

type Query {
    gameCollection(after: Cursor, before: Cursor, first: Int, last: Int): GameConnection

    node(nodeId: ID!): Node

    searchThingsNearPlayer(playerID: String!, latitude: Float!, longitude: Float!, distance: Float!): PlayerThingConnection
}
