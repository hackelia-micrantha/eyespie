[versions]

cache4k = "0.14.0"
cameraExtensions = "1.4.2"
compose = "1.8.2"
compose-plugin = "1.7.3"
agp = "8.9.3"
android-minSdk = "29"
android-compileSdk = "35"
android-targetSdk = "35"
androidx-activityCompose = "1.10.1"
androidx-core-ktx = "1.16.0"
androidx-appcompat = "1.7.0"
androidx-material = "1.12.0"
androidx-constraintlayout = "2.2.1"
androidx-test-junit = "1.2.1"
androidx-espresso-core = "3.6.1"
fragmentKtx = "1.8.7"
geoCompose = "0.8.0"
supabaseKt = "latest.release"
kamelImage = "1.0.3"
kodeinDi = "7.26.1"
kodeinDiConf = "7.26.1"
kotlin = "2.1.20"
junit = "4.13.2"
graphql = "4.2.0"
kotlinxCollectionsImmutable = "0.3.7"
kotlinxCoroutinesAndroid = "1.10.2"
kotlinxDatetime = "0.6.2"
kotlinxSerializationJson = "1.8.1"
ktorClient = "3.1.3"
lifecycleRuntimeKtx = "2.9.0"
okio = "3.11.0"
paletteKtx = "1.0.0"
permissionsCompose = "0.19.1"
voyagerNavigator = "1.0.1"
tensorflowLiteSupport = "latest.release"
tensorflowLite = "latest.release"
mediapipe = "0.20230731"
mediapipeGenAI = "0.10.24"
buildConfig = "3.1.0"
mokoMedia = "0.11.0"

[plugins]

jetbrainsCompose = { id = "org.jetbrains.compose", version.ref = "compose-plugin" }
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
apolloGraphQL = { id = "com.apollographql.apollo", version.ref = "graphql" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
nativeCocoapods = { id = "org.jetbrains.kotlin.native.cocoapods", version.ref = "kotlin" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }

[libraries]

androidx-camera-camera2 = { module = "androidx.camera:camera-camera2", version.ref = "cameraExtensions" }
androidx-camera-core = { module = "androidx.camera:camera-core", version.ref = "cameraExtensions" }
androidx-camera-extensions = { module = "androidx.camera:camera-extensions", version.ref = "cameraExtensions" }
androidx-camera-lifecycle = { module = "androidx.camera:camera-lifecycle", version.ref = "cameraExtensions" }
androidx-camera-video = { module = "androidx.camera:camera-video", version.ref = "cameraExtensions" }
androidx-camera-view = { module = "androidx.camera:camera-view", version.ref = "cameraExtensions" }
androidx-fragment-ktx = { module = "androidx.fragment:fragment-ktx", version.ref = "fragmentKtx" }
androidx-lifecycle-runtime-ktx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-lifecycle-viewmodel-ktx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-palette-ktx = { module = "androidx.palette:palette-ktx", version.ref = "paletteKtx" }
cache4k = { module = "io.github.reactivecircus.cache4k:cache4k", version.ref = "cache4k" }
geo-compose = { module = "dev.icerock.moko:geo-compose", version.ref = "geoCompose" }
kamel-image = { module = "media.kamel:kamel-image", version.ref = "kamelImage" }
kodein-di = { module = "org.kodein.di:kodein-di", version.ref = "kodeinDi" }
kodein-di-conf = { module = "org.kodein.di:kodein-di-conf", version.ref = "kodeinDiConf" }
kodein-di-framework-compose = { module = "org.kodein.di:kodein-di-framework-compose", version.ref = "kodeinDi" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
compose-ui = { module = "androidx.compose.ui:ui", version.ref = "compose" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "compose" }
compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "compose" }
compose-material = { module = "androidx.compose.material3:material3", version.ref = "compose" }
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "androidx-core-ktx" }
androidx-test-junit = { group = "androidx.test.ext", name = "junit", version.ref = "androidx-test-junit" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "androidx-espresso-core" }
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "androidx-appcompat" }
androidx-material = { group = "com.google.android.material", name = "material", version.ref = "androidx-material" }
androidx-constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "androidx-constraintlayout" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
kotlinx-collections-immutable = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable", version.ref = "kotlinxCollectionsImmutable" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinxCoroutinesAndroid" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutinesAndroid" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerializationJson" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktorClient" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktorClient" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktorClient" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktorClient" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktorClient" }
okio = { module = "com.squareup.okio:okio", version.ref = "okio" }
permissions-compose = { module = "dev.icerock.moko:permissions-compose", version.ref = "permissionsCompose" }
permissions-camera = { module = "dev.icerock.moko:permissions-camera", version.ref = "permissionsCompose" }
permissions-test = { module = "dev.icerock.moko:permissions-test", version.ref = "permissionsCompose" }
supabase-apollo-graphql = { module = "io.github.jan-tennert.supabase:apollo-graphql", version.ref = "supabaseKt" }
supabase-gotrue = { module = "io.github.jan-tennert.supabase:gotrue-kt", version.ref = "supabaseKt" }
supabase-postgrest = { module = "io.github.jan-tennert.supabase:postgrest-kt", version.ref = "supabaseKt" }
supabase-realtime = { module = "io.github.jan-tennert.supabase:realtime-kt", version.ref = "supabaseKt" }
supabase-storage = { module = "io.github.jan-tennert.supabase:storage-kt", version.ref = "supabaseKt" }
voyager-kodein = { module = "cafe.adriel.voyager:voyager-kodein", version.ref = "voyagerNavigator" }
voyager-navigator = { module = "cafe.adriel.voyager:voyager-navigator", version.ref = "voyagerNavigator" }
voyager-transitions = { module = "cafe.adriel.voyager:voyager-transitions", version.ref = "voyagerNavigator" }
tensorflow-lite = { module = "org.tensorflow:tensorflow-lite", version.ref = "tensorflowLite" }
tensorflow-lite-gpu = { module = "org.tensorflow:tensorflow-lite-gpu", version.ref = "tensorflowLite" }
tensorflow-lite-support = { module = "org.tensorflow:tensorflow-lite-support", version.ref = "tensorflowLiteSupport" }
tensorflow-lite-metadata = { module = "org.tensorflow:tensorflow-lite-metadata", version.ref = "tensorflowLiteSupport" }
tensorflow-lite-task-vision = { module = "org.tensorflow:tensorflow-lite-task-vision", version.ref = "tensorflowLiteSupport" }
tensorflow-lite-gpu-delegate-plugin = { module = "org.tensorflow:tensorflow-lite-gpu-delegate-plugin", version.ref = "tensorflowLiteSupport" }
mediapipe-tasks-core = { module = "com.google.mediapipe:tasks-core", version.ref = "mediapipe" }
mediapipe-tasks-vision = { module = "com.google.mediapipe:tasks-vision", version.ref = "mediapipe" }
mediapipe-tasks-text = { module = "com.google.mediapipe:tasks-text", version.ref = "mediapipe" }
mediapipe-tasks-audio = { module = "com.google.mediapipe:tasks-audio", version.ref = "mediapipe" }
mediapipe-tasks-image-generator = { module = "com.google.mediapipe:tasks-vision-image-generator", version.ref = "mediapipe" }
mediapipe-tasks-genai = { module = "com.google.mediapipe:tasks-genai", version.ref = "mediapipeGenAI" }
moko-media = { module = "dev.icerock.moko:media", version.ref = "mokoMedia" }
build-config = { module = "com.github.gmazzo:gradle-buildconfig-plugin", version.ref = "buildConfig" }
